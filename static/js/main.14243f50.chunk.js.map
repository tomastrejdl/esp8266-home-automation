{"version":3,"sources":["components/Led.jsx","components/NavBar.jsx","components/EspConnection.jsx","components/Servo.jsx","components/AddControlButton.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Led","react_default","a","createElement","className","htmlFor","this","props","led","id","type","defaultChecked","value","onChange","handleLedSwitchToggle","name","Component","NavBar","EspConnection","onEspIpChange","handleConnectClick","espIpDefaultValue","defaultValue","onClick","Servo","servo","min","max","tabIndex","onMouseUp","handleServoAngleChange","onTouchEnd","AddControlButton","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","connectToEsp","ip","state","espIp","test","xhr","XMLHttpRequest","open","onreadystatechange","createCallback","assertThisInitialized","send","alert","event","angle","target","servoId","performance","now","lastMove","console","log","servoIndex","servos","indexOf","filter","setState","checked","ledId","ledIndex","leds","context","readyState","status","JSON","parse","responseText","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","push","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_this2","NavBar_NavBar","components_EspConnection","map","Servo_Servo","key","Led_Led","components_AddControlButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14243f50.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Led extends Component {\n  render() {\n    return (\n      <div className=\"led\">\n        <label\n          className=\"mdl-switch mdl-js-switch mdl-js-ripple-effect\"\n          htmlFor={this.props.led.id}\n        >\n          <input\n            type=\"checkbox\"\n            id={this.props.led.id}\n            className=\"mdl-switch__input\"\n            defaultChecked={this.props.led.value === 1 ? true : false}\n            onChange={this.props.handleLedSwitchToggle}\n          />\n          <span className=\"mdl-switch__label\">{this.props.led.name}</span>\n        </label>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class NavBar extends Component {\n  render() {\n    return (\n      <div className=\"navbar\">\n        <div className=\"navbar__icons\">\n          <i className=\"material-icons navbar__icons__icon-cw\">settings</i>\n          <i className=\"material-icons navbar__icons__icon-ccw\">settings</i>\n        </div>\n        <h1 className=\"navbar__title\">\n          ESP8266 Home Automation{\" \"}\n          <span className=\"navbar__title__version\">preALPHA</span>\n        </h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst EspConnection = (props) => {\n  const { onEspIpChange, handleConnectClick, espIpDefaultValue } = props;\n  return (\n    <div>\n      <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n        <input\n          className=\"mdl-textfield__input\"\n          type=\"text\"\n          id=\"esp_ip\"\n          defaultValue={espIpDefaultValue}\n          onChange={onEspIpChange}\n        />\n        <label className=\"mdl-textfield__label\" htmlFor=\"esp_ip\">\n          ESP IP\n        </label>\n      </div>\n      <button\n        type=\"button\"\n        className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored\"\n        onClick={handleConnectClick}\n      >\n        Connect\n      </button>\n    </div>\n  );\n};\n\nEspConnection.propTypes = {\n  onEspIpChange: PropTypes.func.isRequired,\n  handleConnectClick: PropTypes.func.isRequired,\n  espIpDefaultValue: PropTypes.string.isRequired,\n};\n\nexport default EspConnection;\n","import React, { Component } from \"react\";\n\nexport default class Servo extends Component {\n  render() {\n    return (\n      <div className=\"servo\">\n        <label htmlFor={this.props.servo.id}>{this.props.servo.name}</label>\n        <input\n          id={this.props.servo.id}\n          className=\"mdl-slider mdl-js-slider\"\n          type=\"range\"\n          min=\"10\"\n          max=\"170\"\n          tabIndex=\"0\"\n          defaultValue={this.props.servo.value}\n          onMouseUp={this.props.handleServoAngleChange}\n          onTouchEnd={this.props.handleServoAngleChange}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddControlButton = (props) => {\n  const { handleConnectClick } = props;\n  return (\n    <button\n      type=\"button\"\n      className=\"mdl-button mdl-js-button mdl-button--fab mdl-js-ripple-effect mdl-button--colored add-control-button\"\n      onClick={handleConnectClick}\n    >\n      <i className=\"material-icons\">add</i>\n    </button>\n  );\n};\n\nAddControlButton.propTypes = {\n  handleConnectClick: PropTypes.func.isRequired,\n};\n\nexport default AddControlButton;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  Led,\n  Servo,\n  NavBar,\n  EspConnection,\n  AddControlButton\n} from \"./components\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      espIp: \"192.168.0.105\",\n      servos: [\n        {\n          id: \"servo_1\",\n          name: \"Blinds left\",\n          value: 20\n        },\n        {\n          id: \"servo_2\",\n          name: \"Blinds right\",\n          value: 150\n        }\n      ],\n      leds: [\n        {\n          id: \"led_1\",\n          name: \"Desk light\",\n          value: 1\n        },\n        {\n          id: \"led_2\",\n          name: \"Ceiling light\",\n          value: 0\n        }\n      ]\n    };\n    this.lastMove = 1000;\n  }\n\n  createCallback(context) {\n    return function () {\n      if (this.readyState === 4 && this.status === 200) {\n        const status = JSON.parse(this.responseText);\n        console.log(status);\n        let state = {\n          servos: [],\n          leds: []\n        };\n        for (let servo of status.servos) {\n          state.servos.push(servo);\n        }\n        for (let led of status.leds) {\n          state.leds.push(led);\n        }\n        context.setState(state);\n      }\n    };\n  }\n\n  componentDidMount() {\n    // this.connectToEsp();\n  }\n\n  connectToEsp = () => {\n    const ip = this.state.espIp;\n    if (\n      !/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n        ip\n      )\n    ) {\n      alert(\"Enter a valid IPv4 address!\");\n      return;\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"http://\" + ip + \":80/status\", true);\n    xhr.onreadystatechange = this.createCallback(this);\n    xhr.send();\n  };\n\n  handleServoAngleChange = (event) => {\n    const angle = event.target.value;\n    const servoId = event.target.id;\n    const ip = this.state.espIp;\n    if (performance.now() - this.lastMove > 100) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(\n        \"GET\",\n        \"http://\" + ip + \":80/servo?servoId=\" + servoId + \"&angle=\" + angle,\n        true\n      );\n      xhr.send();\n      this.lastMove = performance.now();\n      console.log(\"move\");\n    }\n    let servoIndex = this.state.servos.indexOf(\n      this.state.servos.filter(servo => servo.id === servoId)[0]\n    );\n    let { servos } = this.state;\n    servos[servoIndex].value = angle;\n    this.setState({ servos });\n  };\n\n  handleLedSwitchToggle = event => {\n    const value = event.target.checked === true ? 1 : 0;\n    const ledId = event.target.id;\n    const ip = this.state.espIp;\n    var xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"http://\" + ip + \":80/led?ledId=\" + ledId + \"&value=\" + value,\n      true\n    );\n    xhr.send();\n\n    let ledIndex = this.state.leds.indexOf(\n      this.state.leds.filter(led => led.id === ledId)[0]\n    );\n    let { leds } = this.state;\n    leds[ledIndex].value = value;\n    this.setState({ leds });\n  };\n\n  onEspIpChange = event => {\n    this.setState({ espIp: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app__header\">\n          <NavBar />\n          <EspConnection\n            handleConnectClick={this.connectToEsp}\n            onEspIpChange={this.onEspIpChange}\n            espIpDefaultValue={this.state.espIp}\n          />\n        </header>\n        <main className=\"app__content\">\n          <div className=\"servos\">\n            {this.state.servos.map(servo => (\n              <Servo\n                key={servo.id}\n                servo={servo}\n                handleServoAngleChange={this.handleServoAngleChange}\n              />\n            ))}\n          </div>\n          <div className=\"leds\">\n            {this.state.leds.map(led => (\n              <Led\n                key={led.id}\n                led={led}\n                handleLedSwitchToggle={this.handleLedSwitchToggle}\n              />\n            ))}\n          </div>\n          {/* <AddControlDialog /> */}\n          <AddControlButton />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}