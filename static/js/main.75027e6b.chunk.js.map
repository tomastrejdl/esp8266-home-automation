{"version":3,"sources":["components/Led.jsx","components/NavBar.jsx","components/EspConnection.jsx","components/Servo.jsx","components/AddControlButton.jsx","App.jsx","components/AddControlDialog.jsx","serviceWorker.js","index.js"],"names":["Led","react_default","a","createElement","className","htmlFor","this","props","led","id","type","defaultChecked","value","onChange","handleLedSwitchToggle","name","Component","NavBar","EspConnection","defaultValue","onClick","handleConnectClick","Servo","servo","min","max","tabIndex","onMouseUp","handleServoAngleChange","onTouchEnd","AddControlButton","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","servos","leds","lastMove","event","angle","target","servoId","ip","document","getElementById","performance","now","xhr","XMLHttpRequest","open","send","console","log","servoIndex","indexOf","filter","setState","checked","ledId","ledIndex","context","readyState","status","JSON","parse","responseText","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","push","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","connectToEsp","onreadystatechange","createCallback","_this2","NavBar_NavBar","EspConnection_EspConnection","map","Servo_Servo","key","Led_Led","AddControlButton_AddControlButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75027e6b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Led extends Component {\n  render() {\n    return (\n      <div className=\"led\">\n        <label\n          className=\"mdl-switch mdl-js-switch mdl-js-ripple-effect\"\n          htmlFor={this.props.led.id}\n        >\n          <input\n            type=\"checkbox\"\n            id={this.props.led.id}\n            className=\"mdl-switch__input\"\n            defaultChecked={this.props.led.value === 1 ? true : false}\n            onChange={this.props.handleLedSwitchToggle}\n          />\n          <span className=\"mdl-switch__label\">{this.props.led.name}</span>\n        </label>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class NavBar extends Component {\n  render() {\n    return (\n      <div className=\"navbar\">\n        <div className=\"navbar__icons\">\n          <i className=\"material-icons navbar__icons__icon-cw\">settings</i>\n          <i className=\"material-icons navbar__icons__icon-ccw\">settings</i>\n        </div>\n        <h1 className=\"navbar__title\">\n          ESP8266 Home Automation{\" \"}\n          <span className=\"navbar__title__version\">preALPHA</span>\n        </h1>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class EspConnection extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n          <input\n            className=\"mdl-textfield__input\"\n            type=\"text\"\n            id=\"esp_ip\"\n            defaultValue=\"192.168.0.105\"\n          />\n          <label className=\"mdl-textfield__label\" htmlFor=\"esp_ip\">\n            ESP IP\n          </label>\n        </div>\n        <button\n          className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored\"\n          onClick={this.props.handleConnectClick}\n        >\n          Connect\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Servo extends Component {\n  render() {\n    return (\n      <div className=\"servo\">\n        <label htmlFor={this.props.servo.id}>{this.props.servo.name}</label>\n        <input\n          id={this.props.servo.id}\n          className=\"mdl-slider mdl-js-slider\"\n          type=\"range\"\n          min=\"10\"\n          max=\"170\"\n          tabIndex=\"0\"\n          defaultValue={this.props.servo.value}\n          onMouseUp={this.props.handleServoAngleChange}\n          onTouchEnd={this.props.handleServoAngleChange}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class AddControlButton extends Component {\n  render() {\n    return (\n      <button\n        className=\"mdl-button mdl-js-button mdl-button--fab mdl-js-ripple-effect mdl-button--colored add-control-button\"\n        onClick={this.props.handleConnectClick}\n      >\n        <i className=\"material-icons\">add</i>\n      </button>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  Led,\n  Servo,\n  NavBar,\n  EspConnection,\n  AddControlButton\n} from \"./components\";\n\nclass App extends Component {\n  state = {\n    servos: [\n      {\n        id: \"servo_1\",\n        name: \"Blinds left\",\n        value: 20\n      },\n      {\n        id: \"servo_2\",\n        name: \"Blinds right\",\n        value: 150\n      }\n    ],\n    leds: [\n      {\n        id: \"led_1\",\n        name: \"Desk light\",\n        value: 1\n      },\n      {\n        id: \"led_2\",\n        name: \"Ceiling light\",\n        value: 0\n      }\n    ]\n  };\n  lastMove = 1000;\n\n  constructor() {\n    super();\n    this.lastMove = 1000;\n  }\n\n  createCallback(context) {\n    return function() {\n      if (this.readyState === 4 && this.status === 200) {\n        const status = JSON.parse(this.responseText);\n        console.log(status);\n        let state = {\n          servos: [],\n          leds: []\n        };\n        for (let servo of status.servos) {\n          state.servos.push(servo);\n        }\n        for (let led of status.leds) {\n          state.leds.push(led);\n        }\n        context.setState(state);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.connectToEsp();\n  }\n\n  connectToEsp() {\n    const ip = document.getElementById(\"esp_ip\").value;\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"http://\" + ip + \":80/status\", true);\n    xhr.onreadystatechange = this.createCallback(this);\n    xhr.send();\n  }\n\n  handleServoAngleChange = event => {\n    const angle = event.target.value;\n    const servoId = event.target.id;\n    const ip = document.getElementById(\"esp_ip\").value;\n    if (performance.now() - this.lastMove > 100) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(\n        \"GET\",\n        \"http://\" + ip + \":80/servo?servoId=\" + servoId + \"&angle=\" + angle,\n        true\n      );\n      xhr.send();\n      this.lastMove = performance.now();\n      console.log(\"move\");\n    }\n    let servoIndex = this.state.servos.indexOf(\n      this.state.servos.filter(servo => servo.id === servoId)[0]\n    );\n    let { servos } = this.state;\n    servos[servoIndex].value = angle;\n    this.setState({ servos });\n  };\n\n  handleLedSwitchToggle = event => {\n    const value = event.target.checked === true ? 1 : 0;\n    const ledId = event.target.id;\n    const ip = document.getElementById(\"esp_ip\").value;\n    var xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"http://\" + ip + \":80/led?ledId=\" + ledId + \"&value=\" + value,\n      true\n    );\n    xhr.send();\n\n    let ledIndex = this.state.leds.indexOf(\n      this.state.leds.filter(led => led.id === ledId)[0]\n    );\n    let { leds } = this.state;\n    leds[ledIndex].value = value;\n    this.setState({ leds });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app__header\">\n          <NavBar />\n          <EspConnection handleConnectClick={this.connectToEsp} />\n        </header>\n        <main className=\"app__content\">\n          <div className=\"servos\">\n            {this.state.servos.map(servo => (\n              <Servo\n                key={servo.id}\n                servo={servo}\n                handleServoAngleChange={this.handleServoAngleChange}\n              />\n            ))}\n          </div>\n          <div className=\"leds\">\n            {this.state.leds.map(led => (\n              <Led\n                key={led.id}\n                led={led}\n                handleLedSwitchToggle={this.handleLedSwitchToggle}\n              />\n            ))}\n          </div>\n          {/* <AddControlDialog /> */}\n          <AddControlButton />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nexport default class AddControlDialog extends Component {\n  render() {\n    return (\n      <div className=\"mdl-dialog\">\n        <h4>Dialog Title</h4>\n        <p>\n          <button />\n          <button />\n        </p>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}